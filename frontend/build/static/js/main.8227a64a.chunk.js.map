{"version":3,"sources":["util/route_util.js","util/session_api_util.js","actions/session_actions.js","components/nav/navbar.js","components/nav/navbar_container.js","components/main/main_page.js","components/session/login_form.js","components/session/login_form_container.js","components/session/signup_form.js","components/session/signup_form_container.js","components/search_bar/search.js","actions/stock_actions.js","util/stock_api_util.js","components/search_bar/search_bar_container.js","components/portfolio/portfolio.js","components/portfolio/portfolio_container.js","components/transactions/transactions.js","components/transactions/transactions_container.js","components/app.js","components/root.js","reducers/session_reducer.js","reducers/errors/session_errors_reducer.js","reducers/errors/portfolio_errors_reducer.js","reducers/errors/errors_reducer.js","reducers/portfolio_reducer.js","reducers/search_reducer.js","reducers/transactions_reducer.js","reducers/price_reducer.js","reducers/entities_reducer.js","reducers/root_reducer.js","store/store.js","index.js"],"names":["mapStateToProps","state","loggedIn","session","isAuthenticated","AuthRoute","withRouter","connect","Component","component","path","exact","render","props","to","ProtectedRoute","rest","setAuthToken","token","axios","defaults","headers","common","receiveErrors","errors","type","signup","user","dispatch","userData","post","then","err","response","data","login","res","localStorage","setItem","APIUtil","decoded","jwt_decode","currentUser","catch","logout","removeItem","NavBar","logoutUser","bind","getLinks","e","preventDefault","this","className","onClick","React","MainPage","LoginForm","email","password","handleSubmit","renderErrors","nextProps","history","push","setState","field","currentTarget","value","Object","keys","map","error","i","key","onSubmit","onChange","update","placeholder","SignupForm","name","password2","signedIn","isSignedIn","Search","currentString","display","currentStockSymbol","quantity","handleQuery","handleBlur","handleFocus","handleQuantity","target","length","searchStock","results","values","filter","stock","idx","setTimeout","allResults","renderResults","payload","symbol","qty","balance","accountBalance","userId","onBlur","onFocus","purchaseStock","receiveNewBalance","fetchStockPrice","get","StockApiUtil","receiveLatestPrice","fetchStockBatchPrices","symbols","symbolsArr","join","receiveLatestBatchPrices","fetchAccountBalance","fetchPortfolio","portfolio","receivePortfolio","query","searchQuery","receiveSearch","entities","search","string","Portfolio","currentBalance","portfolioValue","Set","quantities","renderStockQuantities","renderLatestStockPrices","renderStockSymbols","updatePortfolioValue","fetchLatestStockBatchPrices","id","qtys","totalValue","prices","quote","latestPrice","Array","from","previousClose","toFixed","portItems","reduce","prev","curr","count","set","Map","size","add","Transactions","date","hours","getHours","minutes","getMinutes","ampm","toLocaleString","split","transactions","transaction","stockSymbol","transactionPrice","price","stockQty","transactionDate","formatDate","Date","concat","formatAMPM","toString","reverse","renderTransactions","App","LoginFormContainer","SignupFormContainer","PortfolioContainer","TransactionsContainer","Root","store","initialState","_nullErrors","SessionErrorsReducer","action","freeze","PortfolioErrorsReducer","combineReducers","_nullState","portfolioReducer","searchReducer","bestMatches","TransactionReducer","PriceReducer","newState","merge","entitiesReducer","transactionReducer","RootReducer","undefined","configureStore","preloadedState","createStore","rootReducer","applyMiddleware","thunk","logger","document","addEventListener","jwtToken","decodedUser","currentTime","now","exp","window","location","href","root","getElementById","ReactDOM"],"mappings":"yOAgCMA,EAAkB,SAAAC,GAAK,MAC3B,CAACC,SAAUD,EAAME,QAAQC,kBAGdC,EAAYC,YAAWC,YAAQP,EAARO,EA/BvB,SAAC,GAAD,IAAcC,EAAd,EAAGC,UAAsBC,EAAzB,EAAyBA,KAAMR,EAA/B,EAA+BA,SAAUS,EAAzC,EAAyCA,MAAzC,OACX,kBAAC,IAAD,CAAOD,KAAMA,EAAMC,MAAOA,EAAOC,OAAQ,SAACC,GAAD,OACtCX,EAIC,kBAAC,IAAD,CAAUY,GAAG,eAHb,kBAACN,EAAcK,UA8BRE,EAAiBT,YAAWC,YAAQP,EAARO,EAtBvB,SAAC,GAAD,IAAcC,EAAd,EAAGC,UAAsBP,EAAzB,EAAyBA,SAAac,EAAtC,+CAChB,kBAAC,IAAD,iBACMA,EADN,CAEEJ,OAAQ,SAAAC,GAAK,OACXX,EACE,kBAACM,EAAcK,GAGf,kBAAC,IAAD,CAAUC,GAAG,mB,iBCtBRG,EAAe,SAAAC,GACtBA,EACFC,IAAMC,SAASC,QAAQC,OAAvB,cAAiDJ,SAE1CC,IAAMC,SAASC,QAAQC,OAAvB,e,iBCcEC,EAAgB,SAAAC,GAAM,MAAK,CACpCC,KAjBkC,yBAkBlCD,WASSE,EAAS,SAAAC,GAAI,OAAI,SAAAC,GAAQ,ODrBfC,ECsBJF,EDrBVR,IAAMW,KAAK,sBAAuBD,ICqBlBE,MAAK,kBACtBH,EAlBgC,CACpCH,KAVgC,4BA4B7B,SAAAO,GAAG,OACFJ,EAASL,EAAcS,EAAIC,SAASC,UDzBtB,IAACL,IC8BVM,EAAQ,SAAAR,GAAI,OAAI,SAAAC,GAAQ,OD1BfC,EC2BJF,ED1BTR,IAAMW,KAAK,mBAAoBD,IC0BhBE,MAAK,SAAAK,GAAQ,IACrBlB,EAAUkB,EAAIF,KAAdhB,MACRmB,aAAaC,QAAQ,WAAYpB,GACjCqB,EAAqBrB,GACrB,IAAMsB,EAAUC,IAAWvB,GAC3BU,EArC0C,CAC9CH,KAPgC,uBAQhCiB,YAmCgCF,OAE/BG,OAAM,SAAAX,GACHJ,EAASL,EAAcS,EAAIC,SAASC,UDnCvB,IAACL,ICuCTe,EAAS,kBAAM,SAAAhB,GAExBS,aAAaQ,WAAW,YAExBN,GAAqB,GAErBX,EAjC6B,CAC7BH,KAtB+B,0B,0CCyCpBqB,E,YAzCb,WAAYjC,GAAQ,IAAD,8BACjB,4CAAMA,KACDkC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAHC,E,wEAMRE,GACPA,EAAEC,iBACFC,KAAKvC,MAAM+B,W,iCAKX,OAAIQ,KAAKvC,MAAMX,SAET,yBAAKmD,UAAU,iBACX,kBAAC,IAAD,CAAMA,UAAU,QAAQvC,GAAI,cAA5B,aACA,kBAAC,IAAD,CAAMuC,UAAU,QAAQvC,GAAI,iBAA5B,gBACA,4BAAQwC,QAASF,KAAKL,YAAtB,WAKJ,yBAAKM,UAAU,wBACX,kBAAC,IAAD,CAAMA,UAAU,QAAQvC,GAAI,WAA5B,UACA,kBAAC,IAAD,CAAMuC,UAAU,QAAQvC,GAAI,UAA5B,Y,+BAOV,OACE,yBAAKuC,UAAU,oBACX,wBAAIA,UAAU,UAAd,kBACED,KAAKH,gB,GApCEM,IAAM/C,WCKZD,eAJS,SAAAN,GAAK,MAAK,CAChCC,SAAUD,EAAME,QAAQC,mBAKxB,CAAEwC,UAFWrC,CAGbuC,GCIaU,E,iLAXX,OACE,yBAAKH,UAAU,yBACb,wBAAIA,UAAU,eAAd,yDACA,4BAAQA,UAAU,eAAlB,kC,GANeE,IAAM/C,W,QCEvBiD,E,YACJ,WAAY5C,GAAQ,IAAD,8BACjB,4CAAMA,KAEDZ,MAAQ,CACXyD,MAAO,GACPC,SAAU,GACVnC,OAAQ,IAGV,EAAKoC,aAAe,EAAKA,aAAaZ,KAAlB,gBACpB,EAAKa,aAAe,EAAKA,aAAab,KAAlB,gBAVH,E,uFAcOc,IACM,IAA1BA,EAAUpB,aACZU,KAAKvC,MAAMkD,QAAQC,KAAK,WAI1BZ,KAAKa,SAAS,CAACzC,OAAQsC,EAAUtC,W,6BAI5B0C,GAAQ,IAAD,OACZ,OAAO,SAAAhB,GAAC,OAAI,EAAKe,SAAL,eACTC,EAAQhB,EAAEiB,cAAcC,W,mCAKhBlB,GACXA,EAAEC,iBAEF,IAAIxB,EAAO,CACT+B,MAAON,KAAKnD,MAAMyD,MAClBC,SAAUP,KAAKnD,MAAM0D,UAGvBP,KAAKvC,MAAMsB,MAAMR,K,qCAIH,IAAD,OACb,OACE,4BACG0C,OAAOC,KAAKlB,KAAKnD,MAAMuB,QAAQ+C,KAAI,SAACC,EAAOC,GAAR,OAClC,wBAAIC,IAAG,gBAAWD,IACf,EAAKxE,MAAMuB,OAAOgD,U,+BAQ3B,OACE,yBAAKnB,UAAU,yBACb,0BAAMsB,SAAUvB,KAAKQ,cACnB,6BACI,2BAAOnC,KAAK,OACV2C,MAAOhB,KAAKnD,MAAMyD,MAClBkB,SAAUxB,KAAKyB,OAAO,SACtBC,YAAY,UAEhB,6BACE,2BAAOrD,KAAK,WACV2C,MAAOhB,KAAKnD,MAAM0D,SAClBiB,SAAUxB,KAAKyB,OAAO,YACtBC,YAAY,aAEhB,6BACA,2BAAOzB,UAAU,gBAAgB5B,KAAK,SAAS2C,MAAM,WACpDhB,KAAKS,sB,GA1EMN,IAAM/C,WAkFfF,cAAWmD,GCtEXlD,eAZS,SAACN,GACvB,MAAO,CACLuB,OAAQvB,EAAMuB,OAAOrB,YAIE,SAACyB,GAC1B,MAAO,CACLO,MAAO,SAAAR,GAAI,OAAIC,EAASO,EAAMR,QAInBpB,CAGbkD,GChBIsB,E,YACJ,WAAYlE,GAAQ,IAAD,8BACjB,4CAAMA,KACDZ,MAAQ,CACXyD,MAAO,GACPsB,KAAM,GACNrB,SAAU,GACVsB,UAAW,GACXzD,OAAQ,IAGV,EAAKoC,aAAe,EAAKA,aAAaZ,KAAlB,gBAVH,E,uFAaOc,IACG,IAAvBA,EAAUoB,UACZ9B,KAAKvC,MAAMkD,QAAQC,KAAK,UAG1BZ,KAAKa,SAAS,CAACzC,OAAQsC,EAAUtC,W,6BAG5B0C,GAAQ,IAAD,OACZ,OAAO,SAAAhB,GAAC,OAAI,EAAKe,SAAL,eACTC,EAAQhB,EAAEiB,cAAcC,W,mCAIhBlB,GACXA,EAAEC,iBACF,IAAIxB,EAAO,CACT+B,MAAON,KAAKnD,MAAMyD,MAClBsB,KAAM5B,KAAKnD,MAAM+E,KACjBrB,SAAUP,KAAKnD,MAAM0D,SACrBsB,UAAW7B,KAAKnD,MAAMgF,WAGxB7B,KAAKvC,MAAMa,OAAOC,EAAMyB,KAAKvC,MAAMkD,W,qCAGrB,IAAD,OACb,OACE,4BACGM,OAAOC,KAAKlB,KAAKnD,MAAMuB,QAAQ+C,KAAI,SAACC,EAAOC,GAAR,OAClC,wBAAIC,IAAG,gBAAWD,IACf,EAAKxE,MAAMuB,OAAOgD,U,+BAQ3B,OACE,yBAAKnB,UAAU,yBACb,0BAAMsB,SAAUvB,KAAKQ,cACnB,yBAAKP,UAAU,eACb,6BACE,2BAAO5B,KAAK,OACV2C,MAAOhB,KAAKnD,MAAMyD,MAClBkB,SAAUxB,KAAKyB,OAAO,SACtBC,YAAY,UAEhB,6BACE,2BAAOrD,KAAK,OACV2C,MAAOhB,KAAKnD,MAAM+E,KAClBJ,SAAUxB,KAAKyB,OAAO,QACtBC,YAAY,SAEhB,6BACE,2BAAOrD,KAAK,WACV2C,MAAOhB,KAAKnD,MAAM0D,SAClBiB,SAAUxB,KAAKyB,OAAO,YACtBC,YAAY,aAEhB,6BACE,2BAAOrD,KAAK,WACV2C,MAAOhB,KAAKnD,MAAMgF,UAClBL,SAAUxB,KAAKyB,OAAO,aACtBC,YAAY,qBAEhB,6BACA,2BAAOzB,UAAU,gBAAgB5B,KAAK,SAAS2C,MAAM,WACpDhB,KAAKS,sB,GAnFON,IAAM/C,WA2FhBF,cAAWyE,GC7EXxE,eAbS,SAACN,GACvB,MAAO,CACLiF,SAAUjF,EAAME,QAAQgF,WACxB3D,OAAQvB,EAAMuB,OAAOrB,YAIE,SAACyB,GAC1B,MAAO,CACLF,OAAQ,SAAAC,GAAI,OAAIC,EAASF,EAAOC,QAIrBpB,CAGbwE,G,QCqEaK,E,YAtFb,WAAYvE,GAAQ,IAAD,8BACjB,4CAAMA,KACDZ,MAAQ,CACXoF,cAAe,GACfC,SAAS,EACTC,mBAAoB,KACpBC,SAAU,GAEZ,EAAKC,YAAc,EAAKA,YAAYzC,KAAjB,gBACnB,EAAK0C,WAAa,EAAKA,WAAW1C,KAAhB,gBAClB,EAAK2C,YAAc,EAAKA,YAAY3C,KAAjB,gBACnB,EAAK4C,eAAiB,EAAKA,eAAe5C,KAApB,gBAXL,E,yEAcPE,GAAI,IAAD,OACbE,KAAKa,SAAS,CAAEoB,cAAenC,EAAE2C,OAAOzB,QAAQ,WAC9C,GAAI,EAAKnE,MAAMoF,eAAiB,EAAKpF,MAAMoF,cAAcS,OAAS,GAC5D,EAAK7F,MAAMoF,cAAcS,OAAS,IAAM,EAC1C,OAAO,EAAKjF,MAAMkF,YAAY,EAAK9F,MAAMoF,oB,qCAMlCnC,GACbE,KAAKa,SAAS,CAACuB,SAAUtC,EAAE2C,OAAOzB,U,sCAGnB,IACX4B,EADU,OAEmB,KAA7B5C,KAAKnD,MAAMoF,cACbW,EAAU,yBAAK3C,UAAU,eAezB2C,EAbiB3B,OAAO4B,OAAO7C,KAAKvC,MAAMmF,SAETE,QAAO,SAAAC,GAEtC,GAAsB,kBAAlBA,EADS,aAC0B,OAAOA,KAEZ5B,KAAI,SAAC4B,EAAOC,GAG9C,OAAO,wBAAI1B,IAAK0B,EAAK/C,UAAU,kBAAkBC,QAAS,kBAAM,EAAKW,SAAS,CAACoB,cAAec,EADnF,WACgGZ,mBAAoBY,EAFlH,iBAGX,yBAAK9C,UAAU,iBAAiB8C,EAHrB,cAIX,0BAAM9C,UAAU,eAAe8C,EAHtB,gBAOf,OAAOH,I,mCAGK,IAAD,OACXK,YAAW,WACL,EAAKpG,MAAMqF,SACb,EAAKrB,SAAS,CAAEqB,SAAS,MAE1B,O,oCAIElC,KAAKnD,MAAMqF,SACdlC,KAAKa,SAAS,CAAEqB,SAAS,M,+BAInB,IAAD,OACHgB,EAAalD,KAAKmD,gBAClBC,EAAU,CAAEC,OAAQrD,KAAKnD,MAAMsF,mBACjCmB,IAAKtD,KAAKnD,MAAMuF,SAChBmB,QAASvD,KAAKvC,MAAM+F,eACpBC,OAAQzD,KAAKvC,MAAMgG,QACrB,OACI,yBAAKxD,UAAU,oBACb,2BAAO5B,KAAK,SAAS4B,UAAU,aAAayD,OAAQ1D,KAAKsC,WAAYqB,QAAS3D,KAAKuC,YAAaf,SAAUxB,KAAKqC,YAAarB,MAAOhB,KAAKnD,MAAMoF,cAAeP,YAAY,qBACxKwB,EAAWR,OAAS,GAAK,yBAAKzC,UAAS,yBAAoBD,KAAKnD,MAAMqF,UACvE,wBAAIjC,UAAU,eACXiD,IAGH,2BAAO7E,KAAK,OAAOmD,SAAUxB,KAAKwC,eAAgBvC,UAAU,WAAWyB,YAAY,aACnF,4BAAQxB,QAAS,kBAAM,EAAKzC,MAAMmG,cAAcR,KAAhD,Y,GAjFWjD,IAAM/C,WCYdyG,EAAoB,SAAAL,GAAc,MAAK,CAClDnF,KAZiC,sBAajCmF,mBAuBWM,EAAkB,SAAAT,GAAM,OAAI,SAAA7E,GACvC,OCtB8B,SAAC6E,GAC/B,OAAOtF,IAAMgG,IAAN,sCAAyCV,IDqBzCW,CAA8BX,GAAQ1E,MAAK,SAAAyE,GAChD,OAAO5E,EAjBuB,SAAA4E,GAAO,MAAK,CAC5C/E,KApBkC,uBAqBlC+E,WAekBa,CAAmBb,SAI1Bc,EAAwB,SAAAC,GAAO,OAAI,SAAA3F,GAC9C,OCxBoC,SAAC4F,GACrC,IAAID,EAAUC,EAAWC,KAAK,KAC9B,OAAOtG,IAAMgG,IAAN,4CAA+CI,IDsB/CH,CAAoCG,GAASxF,MAAK,SAAAyE,GACvD,OAAO5E,EAlB6B,SAAA4E,GAAO,MAAK,CAClD/E,KAxByC,8BAyBzC+E,WAgBkBkB,CAAyBlB,SAIhCmB,EAAsB,SAACd,GAAD,OAAY,SAAAjF,GAC7C,OCtCiC,SAACiF,GAClC,OAAO1F,IAAMgG,IAAN,6BAAgCN,IDqChCO,CAAiCP,GAAQ9E,MAAK,SAAA6E,GACnD,OAAOhF,EAASqF,EAAkBL,SAIzBgB,EAAiB,SAACf,GAAD,OAAY,SAAAjF,GACxC,OChD4B,SAACiF,GAC7B,OAAO1F,IAAMgG,IAAN,2BAA8BN,ID+C9BO,CAA4BP,GAAQ9E,MAAK,SAAA8F,GAC9C,OAAOjG,EAxCqB,SAAAiG,GAAS,MAAK,CAC5CpG,KAlB+B,oBAmB/BoG,aAsCkBC,CAAiBD,SAIxB9B,EAAc,SAACgC,GAAD,OAAW,SAAAnG,GACpC,OC9D0BoG,ED8DMD,EC7DzB5G,IAAMgG,IAAN,6BAAgCa,KD6DAjG,MAAK,SAAAiE,GAC1C,OAAOpE,EAxDkB,SAAAoE,GAAO,MAAK,CACvCvE,KAT4B,iBAU5BuE,WAsDkBiC,CAAcjC,OC/DP,IAACgC,IDmEfhB,EAAgB,SAACR,GAAD,OAAa,SAAA5E,GACxC,OChE4BM,EDgEMsE,EC/D3BrF,IAAMW,KAAK,4BAA6BI,ID+DJH,MAAK,SAAA6E,GAC9C,OAAOhF,EAASqF,EAAkBL,OAChC,SAAA5E,GACF,OAAOJ,EAvCsC,CAC/CH,KA/BsC,2BAgCtCD,OAqCyCQ,EAAIC,SAASC,UCnE3B,IAACA,ICUf3B,eAZH,SAAAN,GAAK,MAAK,CACpB+F,QAAS/F,EAAMiI,SAASC,OACxBvB,eAAgB3G,EAAME,QAAQwB,KAAKgF,YAGzB,SAAA/E,GACV,MAAO,CACLmE,YAAa,SAAAqC,GAAM,OAAIxG,EAASmE,EAAYqC,KAC5CpB,cAAe,SAAC9E,GAAD,OAAUN,EAASoF,EAAc9E,QAIrC3B,CAAkB6E,GCbZiD,E,YACnB,WAAYxH,GAAO,IAAD,8BAChB,4CAAMA,KACDZ,MAAQ,CACXqI,eAAgB,EAChBC,eAAgB,EAChB/G,OAAQ,GACR+F,QAAS,IAAIiB,IACbC,WAAY,IAEd,EAAKC,sBAAwB,EAAKA,sBAAsB1F,KAA3B,gBAC7B,EAAK2F,wBAA0B,EAAKA,wBAAwB3F,KAA7B,gBAC/B,EAAK4F,mBAAqB,EAAKA,mBAAmB5F,KAAxB,gBAC1B,EAAK6F,qBAAuB,EAAKA,qBAAqB7F,KAA1B,gBAC5B,EAAK8F,4BAA8B,EAAKA,4BAA4B9F,KAAjC,gBAbnB,E,iFAiBE,IAAD,OACjBI,KAAKvC,MAAM8G,oBAAoBvE,KAAKvC,MAAM6B,YAAYqG,IACtD3F,KAAKa,SAAS,CAACqE,eAAgBlF,KAAKvC,MAAM+F,iBAC1CxD,KAAKvC,MAAM+G,eAAexE,KAAKvC,MAAM6B,YAAYqG,IAAIhH,MAAK,kBAAM,EAAK+G,mC,2CAGlD,IAAD,OACd1F,KAAKvC,MAAM+F,iBAAmBxD,KAAKnD,MAAMqI,gBAC3ClF,KAAKa,SAAS,CAACqE,eAAgBlF,KAAKvC,MAAM+F,iBAC1CxD,KAAKvC,MAAM+G,eAAexE,KAAKvC,MAAM6B,YAAYqG,IAChDhH,MAAK,WACJ,OAAO,EAAK+G,kCAGN1F,KAAKvC,MAAMW,SAAW4B,KAAKnD,MAAMuB,QACzC4B,KAAKa,SAAS,CAACzC,OAAQ4B,KAAKvC,MAAMW,W,6CAKpC,IAAMwH,EAAO5F,KAAKnD,MAAMwI,WACpBQ,EAAa,EAIjB,OAHA7F,KAAKvC,MAAMqI,OAAO3E,KAAI,SAAC4E,EAAM/C,GAC3B,OAAO6C,GAAcE,EAAMC,YAAcJ,EAAK5C,MAEzC6C,I,qCAGM,IAAD,OAOZ,OANsB5E,OAAOC,KAAKlB,KAAKnD,MAAMuB,QAAQ+C,KAAI,SAACC,EAAOC,GAC/D,OACA,wBAAIC,IAAG,qBAAgBD,IACpB,EAAKxE,MAAMuB,OAAOgD,S,oDAcvB,IAAM+C,EAAU8B,MAAMC,KAAKlG,KAAKnD,MAAMsH,SACtCnE,KAAKvC,MAAMyG,sBAAsBC,K,gDAQjC,IAAMyB,EAAO5F,KAAKnD,MAAMwI,WAsBxB,OArBarF,KAAKvC,MAAMqI,OAAO3E,KAAI,SAAC4E,EAAM/C,GACxC,OAAI+C,EAAMC,YAAcD,EAAMI,cAE1B,yBAAK7E,IAAG,gBAAW0B,GAAO/C,UAAU,eAApC,KACK8F,EAAMC,YAAcJ,EAAK5C,IAAMoD,QAAQ,IAGrCL,EAAMC,YAAcD,EAAMI,cAEjC,yBAAK7E,IAAG,gBAAW0B,GAAO/C,UAAU,aAApC,KACK8F,EAAMC,YAAcJ,EAAK5C,IAAMoD,QAAQ,IAGrCL,EAAMC,cAAgBD,EAAMI,cAEnC,yBAAK7E,IAAG,gBAAW0B,GAAO/C,UAAU,cAApC,KACK8F,EAAMC,YAAcJ,EAAK5C,IAAMoD,QAAQ,SAHzC,O,2CAYT,IAAMjC,EAAU8B,MAAMC,KAAKlG,KAAKnD,MAAMsH,SAgBtC,OAfcnE,KAAKvC,MAAMqI,OAAO3E,KAAI,SAAC4E,EAAM/C,GACzC,OAAI+C,EAAMC,YAAcD,EAAMI,cAE1B,yBAAK7E,IAAG,iBAAY0B,GAAO/C,UAAU,gBAAgBkE,EAAQnB,IAEtD+C,EAAMC,YAAcD,EAAMI,cAEjC,yBAAK7E,IAAG,iBAAY0B,GAAO/C,UAAU,cAAckE,EAAQnB,IAEpD+C,EAAMC,cAAgBD,EAAMI,cAEnC,yBAAK7E,IAAG,iBAAY0B,GAAO/C,UAAU,eAAekE,EAAQnB,SAFzD,O,8CASa,IAClB4C,EADiB,OAGfS,EAAYrG,KAAKvC,MAAMgH,UAAU6B,QAAO,SAACC,EAAMC,GACnD,IAAIC,EAAQF,EAAKxC,IAAIyC,EAAKnD,SAAW,EAErC,OADAkD,EAAKG,IAAIF,EAAKnD,OAAQmD,EAAKpE,SAAWqE,GAC/BF,IACN,IAAII,KACP,OAAuB,IAAnBN,EAAUO,KACL,uDAEPhB,EAAO,YAAIS,EAAUxD,UAAU1B,KAAI,SAACmC,EAAKN,GAEvC,OADA,EAAKnG,MAAMwI,WAAWrC,GAAOM,EACtB,yBAAKhC,IAAG,cAAS0B,IAASM,EAA1B,gBAEC,YAAI+C,EAAUnF,QAAQC,KAAI,SAACkC,GACnC,EAAKxG,MAAMsH,QAAQ0C,IAAIxD,MAIzB,oCACF,yBAAKpD,UAAU,kBACZ2F,O,+BAMH,OACE,yBAAK3F,UAAU,kBACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,mBAAf,qBAAoDD,KAAKyF,uBAAuBW,QAAQ,GAAxF,MAEF,yBAAKnG,UAAU,2BACb,wBAAIA,UAAU,eACZ,wBAAIA,UAAU,cACV,yBAAKA,UAAU,kBACZD,KAAKwF,sBAELxF,KAAKsF,wBACR,yBAAKrF,UAAU,eACZD,KAAKuF,+BAMlB,yBAAKtF,UAAU,qBACb,yBAAKA,UAAU,mBAAf,oBAAmDD,KAAKnD,MAAMqI,eAAekB,QAAQ,GAArF,KACA,kBAAC,EAAD,CAAoB3C,OAAQzD,KAAKvC,MAAM6B,YAAYqG,KAClD3F,KAAKS,qB,GAzKuBrD,aCoBxBD,eAnBH,SAAAN,GACV,MAAO,CACLyC,YAAazC,EAAME,QAAQwB,KAC3BiF,eAAgB3G,EAAME,QAAQwB,KAAKgF,QACnCkB,UAAW5H,EAAMiI,SAASL,UAC1BqB,OAAQjJ,EAAMiI,SAASgB,OACvB1H,OAAQvB,EAAMuB,OAAOqG,cAIb,SAAAjG,GACV,MAAO,CACLgG,eAAgB,SAACf,GAAD,OAAYjF,EAASgG,EAAef,KACpDc,oBAAqB,SAACd,GAAD,OAAYjF,EAAS+F,EAAoBd,KAC9DK,gBAAiB,SAACT,GAAD,OAAY7E,EAASsF,EAAgBT,KACtDa,sBAAuB,SAACC,GAAD,OAAa3F,EAAS0F,EAAsBC,QAIxDhH,CAAkB8H,GCrBZ6B,E,4LAGjB9G,KAAKvC,MAAM+G,eAAexE,KAAKvC,MAAM6B,YAAYqG,M,iCAGxCoB,GACT,IAAIC,EAAQD,EAAKE,WACbC,EAAUH,EAAKI,aACfC,EAAOJ,GAAS,GAAK,KAAO,KAKhC,MADc,OAFdA,GADAA,GAAgB,KACQ,IAEM,KAD9BE,EAAUA,EAAU,GAAK,IAAIA,EAAUA,GACO,IAAME,I,iCAI3CL,GACT,OAAOA,EAAKM,iBAAiBC,MAAM,KAAK,K,2CAGrB,IAAD,OAelB,OAdYtH,KAAKvC,MAAM8J,aAAapG,KAAI,SAACqG,EAAaxE,GACpD,IAAIyE,EAAcD,EAAYnE,OAC1BqE,EAAmBF,EAAYG,MAC/BC,EAAWJ,EAAYpF,SACvByF,EAAkB,EAAKC,WAAW,IAAIC,KAAKP,EAAYT,OAAOiB,OAAO,EAAKC,WAAW,IAAIF,KAAMP,EAAYT,OAAOmB,YACtH,OACE,wBAAIjI,UAAU,aAAaqB,IAAK0B,GAC9B,qCAAWyE,EAAX,MACA,6BAAMG,EAAN,eACA,iCAAOF,GACP,6BAAMG,OAICM,Y,+BAKb,OACE,yBAAKlI,UAAU,yBACb,yBAAKA,UAAU,qBAAf,gBACA,wBAAIA,UAAU,qBACwB,IAAnCD,KAAKvC,MAAM8J,aAAa7E,OAAe1C,KAAKoI,qBAAuB,4F,GA7CpChL,aCgB3BD,eAbH,SAAAN,GACV,MAAO,CACLyC,YAAazC,EAAME,QAAQwB,KAC3BgJ,aAAc1K,EAAMiI,SAASyC,iBAIrB,SAAA/I,GACV,MAAO,CACLgG,eAAgB,SAACf,GAAD,OAAYjF,EAASgG,EAAef,QAIzCtG,CAAkB2J,GCOlBuB,EAbH,kBACV,yBAAKpI,UAAU,cACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAChD,EAAD,CAAWM,OAAK,EAACD,KAAK,IAAID,UAAW+C,IACrC,kBAACnD,EAAD,CAAWM,OAAK,EAACD,KAAK,SAASD,UAAWiL,IAC1C,kBAACrL,EAAD,CAAWM,OAAK,EAACD,KAAK,UAAUD,UAAWkL,KAE/C,kBAAC5K,EAAD,CAAgBL,KAAK,aAAaD,UAAWmL,IAC7C,kBAAC7K,EAAD,CAAgBL,KAAK,gBAAgBD,UAAWoL,MCRrCC,GARF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,kBAAC,IAAD,CAAUA,MAAQA,GAChB,kBAAC,IAAD,KACE,kBAAC,EAAD,S,wDCDAC,GAAe,CACnB5L,iBAAiB,EACjBuB,KAAM,ICJFsK,GAAc,GAcLC,GAZc,WAAkC,IAAjCjM,EAAgC,uDAAxBgM,GAAaE,EAAW,uCAE5D,OADA9H,OAAO+H,OAAOnM,GACPkM,EAAO1K,MACZ,InBNkC,yBmBOhC,OAAO0K,EAAO3K,OAChB,InBTgC,uBmBU9B,OAAOyK,GACT,QACE,OAAOhM,ICdPgM,GAAc,GAYLI,GAVgB,WAAkC,IAAjCpM,EAAgC,uDAAxBgM,GAAaE,EAAW,uCAE9D,OADA9H,OAAO+H,OAAOnM,GACPkM,EAAO1K,MACZ,IXFoC,2BWGlC,OAAO0K,EAAO3K,OAChB,QACE,OAAOvB,ICJEqM,gBAAgB,CAC7BnM,QAAS+L,GACTrE,UAAWwE,KCLPE,GAAa,GAYJC,GAVU,WAAiC,IAAhCvM,EAA+B,uDAAvBsM,GAAYJ,EAAW,uCAEvD,OADA9H,OAAO+H,OAAOnM,GACNkM,EAAO1K,MACb,IbL6B,oBaM3B,OAAO0K,EAAOtE,UAAU3F,KAC1B,QACE,OAAOjC,ICPPsM,GAAa,GAYJE,GAVO,WAAiC,IAAhCxM,EAA+B,uDAAvBsM,GAAYJ,EAAW,uCAEpD,OADA9H,OAAO+H,OAAOnM,GACNkM,EAAO1K,MACb,IdP0B,iBcQxB,OAAO0K,EAAOnG,QAAQ9D,KAAKwK,YAC7B,QACE,OAAOzM,ICTPsM,GAAa,GAYJI,GAVY,WAAiC,IAAhC1M,EAA+B,uDAAvBsM,GAAYJ,EAAW,uCAEzD,OADA9H,OAAO+H,OAAOnM,GACNkM,EAAO1K,MACb,IfL6B,oBeM3B,OAAO0K,EAAOtE,UAAU3F,KAC1B,QACE,OAAOjC,ICRPsM,GAAa,GAiBJK,GAfM,WAAiC,IAAhC3M,EAA+B,uDAAvBsM,GAAYJ,EAAW,uCAEnD,OADA9H,OAAO+H,OAAOnM,GACNkM,EAAO1K,MAEb,IhBHgC,uBgBI9B,IAAIoL,EAAWC,iBAAM,GAAI7M,GAEzB,OADA4M,EAASV,EAAO3F,QAAQtE,KAAKuE,QAAU0F,EAAO3F,QAAQtE,KAAKkH,YACpDyD,EACT,IhBNuC,8BgBOrC,OAAOV,EAAO3F,QAAQtE,KACxB,QACE,OAAOjC,ICFE8M,GAPST,aAAgB,CACtCnE,OAAQsE,GACR5E,UAAW2E,GACXtD,OAAQ0D,GACRjC,aAAcqC,KCCDC,GANKX,aAAgB,CAClCnM,QTMa,WAAwC,IAA/BF,EAA8B,uDAAtB+L,GAAcG,EAAQ,uCACpD,OAAQA,EAAO1K,MACb,IlBXgC,uBkBY9B,OAAO,gBACFxB,EADL,CAEEG,kBAAmB+L,EAAOzJ,YAC1Bf,KAAMwK,EAAOzJ,cAEjB,IlBf+B,sBkBgB7B,MAAO,CACLtC,iBAAiB,EACjBuB,UAAMuL,GAEV,IlBnBgC,uBkBoB9B,OAAO,gBACFjN,EADL,CAEEkF,YAAY,IAEhB,IT3B+B,sBS4B7B,IAAM0H,EAAWC,iBAAM,GAAI7M,GAE3B,OADA4M,EAASlL,KAAKgF,QAAUwF,EAAOvF,eAAe1E,KAAKyE,QAC5CkG,EACT,QACE,OAAO5M,IS5BXuB,UACA0G,cCMaiF,GARQ,eAACC,EAAD,uDAAkB,GAAlB,OACrBC,aACEC,GACAF,EACAG,aAAgBC,KAAOC,Q,MCK3BC,SAASC,iBAAiB,oBAAoB,WAC5C,IAAI5B,EAGJ,GAAI1J,aAAauL,SAAU,CAGzB3M,EAAaoB,aAAauL,UAG1B,IAAMC,EAAcpL,IAAWJ,aAAauL,UAK5C7B,EAAQoB,GAFe,CAAEhN,QAAS,CAAEC,iBAAiB,EAAMuB,KAAMkM,KAIjE,IAAMC,EAAc3C,KAAK4C,MAAQ,IAG7BF,EAAYG,IAAMF,IAEpB/B,EAAMnK,SAASgB,KACfqL,OAAOC,SAASC,KAAO,eAIzBpC,EAAQoB,GAAe,IAGzB,IAAMiB,EAAOV,SAASW,eAAe,QAErCC,IAAS1N,OAAO,kBAAC,GAAD,CAAMmL,MAAOA,IAAWqC,Q","file":"static/js/main.8227a64a.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Redirect, withRouter } from 'react-router-dom';\n\n// Passed in from parent component or from mapStateToProps\nconst Auth = ({ component: Component, path, loggedIn, exact }) => (\n  <Route path={path} exact={exact} render={(props) => (\n    !loggedIn ? (\n      <Component {...props} />\n    ) : (\n        // Redirect to the portfolio page if the user is authenticated\n      <Redirect to=\"/portfolio\" />\n    )\n  )} />\n);\n\nconst Protected = ({ component: Component, loggedIn, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      loggedIn ? (\n        <Component {...props} />\n      ) : (\n        // Redirect to the login page if the user is already authenticated\n        <Redirect to=\"/login\" />\n      )\n    }\n  />\n);\n\n// Use the isAuthenticated slice of state to determine whether a user is logged in\n\nconst mapStateToProps = state => (\n  {loggedIn: state.session.isAuthenticated}\n);\n\nexport const AuthRoute = withRouter(connect(mapStateToProps)(Auth));\n\nexport const ProtectedRoute = withRouter(connect(mapStateToProps)(Protected));","import axios from 'axios';\n\nexport const setAuthToken = token => {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = token;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\n\nexport const signup = (userData) => {\n  return axios.post('/api/users/register', userData);\n};\n\nexport const login = (userData) => {\n  return axios.post('/api/users/login', userData);\n};","import * as APIUtil from '../util/session_api_util';\nimport jwt_decode from 'jwt-decode';\n\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport const RECEIVE_SESSION_ERRORS = \"RECEIVE_SESSION_ERRORS\";\nexport const RECEIVE_USER_LOGOUT = \"RECEIVE_USER_LOGOUT\";\nexport const RECEIVE_USER_SIGN_IN = \"RECEIVE_USER_SIGN_IN\";\n\n// We'll dispatch this when our user signs in\nexport const receiveCurrentUser = currentUser => ({\n    type: RECEIVE_CURRENT_USER,\n    currentUser\n});\n\n// This will be used to redirect the user to the login page upon signup\nexport const receiveUserSignIn = () => ({\n    type: RECEIVE_USER_SIGN_IN\n});\n  \n// We dispatch this one to show authentication errors on the frontend\nexport const receiveErrors = errors => ({\n    type: RECEIVE_SESSION_ERRORS,\n    errors\n});\n\n// When our user is logged out, we will dispatch this action to set isAuthenticated to false\nexport const logoutUser = () => ({\n    type: RECEIVE_USER_LOGOUT\n});\n\n// Upon signup, dispatch the approporiate action depending on which type of response we receieve from the backend\nexport const signup = user => dispatch => (\n    APIUtil.signup(user).then(() => (\n        dispatch(receiveUserSignIn())\n    ), err => (\n        dispatch(receiveErrors(err.response.data))\n    ))\n);\n\n// Upon login, set the session token and dispatch the current user. Dispatch errors on failure.\nexport const login = user => dispatch => (\n    APIUtil.login(user).then(res => {\n        const { token } = res.data;\n        localStorage.setItem('jwtToken', token);\n        APIUtil.setAuthToken(token);\n        const decoded = jwt_decode(token);\n        dispatch(receiveCurrentUser(decoded))\n    })\n    .catch(err => {\n        dispatch(receiveErrors(err.response.data));\n    })\n)\n\nexport const logout = () => dispatch => {\n    // Remove the token from local storage\n    localStorage.removeItem('jwtToken')\n    // Remove the token from the common axios header\n    APIUtil.setAuthToken(false)\n    // Dispatch a logout action\n    dispatch(logoutUser())\n};","import React from 'react';\nimport { Link } from 'react-router-dom'\n\n\nclass NavBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.logoutUser = this.logoutUser.bind(this);\n    this.getLinks = this.getLinks.bind(this);\n  }\n\n  logoutUser(e) {\n      e.preventDefault();\n      this.props.logout();\n  }\n\n  // Selectively render links dependent on whether the user is logged in\n  getLinks() {\n      if (this.props.loggedIn) {\n        return (\n            <div className=\"nav-container\">\n                <Link className=\"links\" to={'/portfolio'}>Portfolio</Link>\n                <Link className=\"links\" to={'/transactions'}>Transactions</Link>\n                <button onClick={this.logoutUser}>Logout</button>\n            </div>\n        );\n      } else {\n        return (\n            <div className=\"splash-nav-container\">\n                <Link className=\"links\" to={'/signup'}>Signup</Link>\n                <Link className=\"links\" to={'/login'}>Login</Link>\n            </div>\n        );\n      }\n  }\n\n  render() {\n      return (\n        <div className=\"header-container\">\n            <h1 className=\"header\">TTP Full Stack</h1>\n            { this.getLinks() }\n        </div>\n      );\n  }\n}\n\nexport default NavBar;","import { connect } from 'react-redux';\nimport { logout } from '../../actions/session_actions';\n\nimport NavBar from './navbar';\n\nconst mapStateToProps = state => ({\n  loggedIn: state.session.isAuthenticated\n});\n\nexport default connect(\n  mapStateToProps,\n  { logout }\n)(NavBar);","import React from 'react';\n\nclass MainPage extends React.Component {\n\n  render() {\n    return (\n      <div className=\"splash-page-container\">\n        <h1 className=\"main-header\">Welcome to Eugene Chung's TTP Second Stage Submission</h1>\n        <footer className=\"main-footer\">\n          Copyright &copy; 2020 Chung \n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: '',\n      errors: {}\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.renderErrors = this.renderErrors.bind(this);\n  }\n\n  // Once the user has been authenticated, redirect to the Tweets page\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.currentUser === true) {\n      this.props.history.push('/tweets');\n    }\n\n    // Set or clear errors\n    this.setState({errors: nextProps.errors})\n  }\n\n  // Handle field updates (called in the render method)\n  update(field) {\n    return e => this.setState({\n      [field]: e.currentTarget.value\n    });\n  }\n\n  // Handle form submission\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let user = {\n      email: this.state.email,\n      password: this.state.password\n    };\n\n    this.props.login(user); \n  }\n\n  // Render the session errors if there are any\n  renderErrors() {\n    return(\n      <ul>\n        {Object.keys(this.state.errors).map((error, i) => (\n          <li key={`error-${i}`}>\n            {this.state.errors[error]}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"signin-form-container\">\n        <form onSubmit={this.handleSubmit}>\n          <div>\n              <input type=\"text\"\n                value={this.state.email}\n                onChange={this.update('email')}\n                placeholder=\"Email\"\n              />\n            <br/>\n              <input type=\"password\"\n                value={this.state.password}\n                onChange={this.update('password')}\n                placeholder=\"Password\"\n              />\n            <br/>\n            <input className=\"submit-button\" type=\"submit\" value=\"Submit\" />\n            {this.renderErrors()}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(LoginForm);\n","import { connect } from 'react-redux';\nimport { login } from '../../actions/session_actions';\nimport LoginForm from './login_form';\n\nconst mapStateToProps = (state) => {\n  return {\n    errors: state.errors.session\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login: user => dispatch(login(user))\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LoginForm);","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass SignupForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      name: '',\n      password: '',\n      password2: '',\n      errors: {}\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  \n  componentWillReceiveProps(nextProps) {\n    if (nextProps.signedIn === true) {\n      this.props.history.push('/login');\n    }\n\n    this.setState({errors: nextProps.errors})\n  }\n\n  update(field) {\n    return e => this.setState({\n      [field]: e.currentTarget.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    let user = {\n      email: this.state.email,\n      name: this.state.name,\n      password: this.state.password,\n      password2: this.state.password2\n    };\n\n    this.props.signup(user, this.props.history); \n  }\n\n  renderErrors() {\n    return(\n      <ul>\n        {Object.keys(this.state.errors).map((error, i) => (\n          <li key={`error-${i}`}>\n            {this.state.errors[error]}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"signup-form-container\">\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"signup-form\">\n            <br/>\n              <input type=\"text\"\n                value={this.state.email}\n                onChange={this.update('email')}\n                placeholder=\"Email\"\n              />\n            <br/>\n              <input type=\"text\"\n                value={this.state.name}\n                onChange={this.update('name')}\n                placeholder=\"Name\"\n              />\n            <br/>\n              <input type=\"password\"\n                value={this.state.password}\n                onChange={this.update('password')}\n                placeholder=\"Password\"\n              />\n            <br/>\n              <input type=\"password\"\n                value={this.state.password2}\n                onChange={this.update('password2')}\n                placeholder=\"Confirm Password\"\n              />\n            <br/>\n            <input className=\"submit-button\" type=\"submit\" value=\"Submit\" />\n            {this.renderErrors()}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(SignupForm);","import { connect } from 'react-redux';\nimport { signup } from '../../actions/session_actions';\nimport SignupForm from './signup_form';\n\nconst mapStateToProps = (state) => {\n  return {\n    signedIn: state.session.isSignedIn,\n    errors: state.errors.session\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signup: user => dispatch(signup(user))\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SignupForm);","import React from 'react';\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentString: \"\",\n      display: false,\n      currentStockSymbol: null,\n      quantity: 0,\n    }\n    this.handleQuery = this.handleQuery.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);  \n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleQuantity = this.handleQuantity.bind(this);\n  }\n\n  handleQuery(e) {    \n    this.setState({ currentString: e.target.value}, () => {\n      if (this.state.currentString && this.state.currentString.length > 1) {\n        if (this.state.currentString.length % 2 === 0) {\n          return this.props.searchStock(this.state.currentString);\n        }\n      }\n    })\n  }\n\n  handleQuantity(e){\n    this.setState({quantity: e.target.value});\n  }\n\n  renderResults() {\n    let results;\n    if (this.state.currentString === \"\") {\n      results = <div className=\"no-results\"></div>;\n    } else {\n      let allResults = Object.values(this.props.results);\n      // eslint-disable-next-line\n      let filteredResults = allResults.filter(stock => {\n        let region = \"4. region\";\n        if (stock[region] === \"United States\") return stock;  \n      })      \n      let outputResults = filteredResults.map((stock, idx) => {\n        let symbol = \"1. symbol\";\n        let name = \"2. name\";      \n        return <li key={idx} className=\"filtered-search\" onClick={() => this.setState({currentString: stock[name], currentStockSymbol: stock[symbol]})}>\n          <div className=\"search-symbol\">{stock[symbol]}</div>\n          <span className=\"search-name\">{stock[name]}</span></li>\n        });\n      results = outputResults;\n    }\n    return results\n  }\n\n  handleBlur() {\n    setTimeout(() => {\n      if (this.state.display) {\n        this.setState({ display: false });\n      }\n    }, 200);\n  }\n\n  handleFocus() {\n    if (!this.state.display) {\n      this.setState({ display: true })\n    }\n  }\n\n  render() {\n    let allResults = this.renderResults();\n    let payload = { symbol: this.state.currentStockSymbol, \n      qty: this.state.quantity,\n      balance: this.props.accountBalance,\n      userId: this.props.userId };\n    return (\n        <div className=\"search-container\">\n          <input type=\"search\" className=\"search-bar\" onBlur={this.handleBlur} onFocus={this.handleFocus} onChange={this.handleQuery} value={this.state.currentString} placeholder=\"Search a Company\"/>\n          {allResults.length > 0 && <div className={`search-results-${this.state.display}`} >\n          <ul className=\"search-list\">\n            {allResults}\n          </ul>\n          </div> }\n          <input type=\"text\" onChange={this.handleQuantity} className=\"quantity\" placeholder=\"Quantity\"></input>\n          <button onClick={() => this.props.purchaseStock(payload)}>Buy</button>\n        </div> \n    )\n  }\n}\n\nexport default Search;","import * as StockApiUtil from '../util/stock_api_util';\nexport const RECEIVE_SEARCH = \"RECEIVE_SEARCH\";\nexport const RECEIVE_PORTFOLIO = \"RECEIVE_PORTFOLIO\";\nexport const RECEIVE_NEW_BALANCE = \"RECEIVE_NEW_BALANCE\";\nexport const RECEIVE_PORTFOLIO_ERRORS = \"RECEIVE_PORTFOLIO_ERRORS\";\nexport const RECEIVE_LATEST_PRICE = \"RECEIVE_LATEST_PRICE\";\nexport const RECEIVE_LATEST_BATCH_PRICES = \"RECEIVE_LATEST_BATCH_PRICES\";\n\n// todo: rename this file portfolio actions\nexport const receiveSearch = results => ({\n  type: RECEIVE_SEARCH,\n  results,\n});\n\nexport const receiveNewBalance = accountBalance => ({\n  type: RECEIVE_NEW_BALANCE,\n  accountBalance,\n});\n\nexport const receivePortfolio = portfolio => ({\n  type: RECEIVE_PORTFOLIO,\n  portfolio,\n});\n\nexport const receiveLatestPrice = payload => ({\n  type: RECEIVE_LATEST_PRICE,\n  payload,\n})\n\nexport const receiveLatestBatchPrices = payload => ({\n  type: RECEIVE_LATEST_BATCH_PRICES,\n  payload,\n})\n\nexport const receivePortfolioErrors = errors => ({\n  type: RECEIVE_PORTFOLIO_ERRORS,\n  errors,\n});\n\nexport const fetchStockPrice = symbol => dispatch => {  \n  return StockApiUtil.fetchLatestPrice(symbol).then(payload => {\n    return dispatch(receiveLatestPrice(payload))\n  })\n};\n\nexport const fetchStockBatchPrices = symbols => dispatch => {\n  return StockApiUtil.fetchLatestBatchPrices(symbols).then(payload => {\n    return dispatch(receiveLatestBatchPrices(payload))\n  })\n};\n\nexport const fetchAccountBalance = (userId) => dispatch => {\n  return StockApiUtil.fetchAccountBalance(userId).then(accountBalance => {\n    return dispatch(receiveNewBalance(accountBalance))\n  })\n};\n\nexport const fetchPortfolio = (userId) => dispatch => {\n  return StockApiUtil.fetchPortfolio(userId).then(portfolio => {\n    return dispatch(receivePortfolio(portfolio));\n  })\n};\n\nexport const searchStock = (query) => dispatch => {\n  return StockApiUtil.searchStock(query).then(results => {\n    return dispatch(receiveSearch(results));\n  })\n};\n\nexport const purchaseStock = (payload) => dispatch => {\n  return StockApiUtil.purchaseStock(payload).then(accountBalance => {\n    return dispatch(receiveNewBalance(accountBalance));\n  },  err => {\n    return dispatch(receivePortfolioErrors(err.response.data))\n  })\n};\n","import axios from 'axios';\n\nexport const searchStock = (searchQuery) => {\n  return axios.get(`/api/stocks/search/${searchQuery}`);\n};\n\nexport const purchaseStock = (data) => {\n  return axios.post('/api/stocks/purchaseStock', data);\n};\n\nexport const fetchPortfolio = (userId) => {\n  return axios.get(`/api/stocks/user/${userId}`);\n};\n\nexport const fetchAccountBalance = (userId) => {\n  return axios.get(`/api/users/balance/${userId}`)\n};\n\nexport const fetchLatestPrice = (symbol) => {\n  return axios.get(`api/stocks/fetchlatestPrice/${symbol}`)\n};\n\nexport const fetchLatestBatchPrices = (symbolsArr) => {\n  let symbols = symbolsArr.join(\",\");\n  return axios.get(`api/stocks/fetchlatestBatchPrices/${symbols}`)\n};\n\n","import { connect } from 'react-redux';\nimport Search from './search';\nimport { searchStock, purchaseStock } from '../../actions/stock_actions';\n\nconst msp = state => ({\n  results: state.entities.search,\n  accountBalance: state.session.user.balance,\n});\n\nconst mdp = dispatch => {\n  return {\n    searchStock: string => dispatch(searchStock(string)),\n    purchaseStock: (data) => dispatch(purchaseStock(data)),\n  }\n};\n\nexport default connect(msp, mdp)(Search);","import React, { Component } from 'react'\nimport SearchBarContainer from \"../search_bar/search_bar_container\";\n\nexport default class Portfolio extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      currentBalance: 0,\n      portfolioValue: 0,\n      errors: {},\n      symbols: new Set(),\n      quantities: {},\n    };\n    this.renderStockQuantities = this.renderStockQuantities.bind(this);\n    this.renderLatestStockPrices = this.renderLatestStockPrices.bind(this);\n    this.renderStockSymbols = this.renderStockSymbols.bind(this);\n    this.updatePortfolioValue = this.updatePortfolioValue.bind(this);\n    this.fetchLatestStockBatchPrices = this.fetchLatestStockBatchPrices.bind(this);\n    // this.fetchLatestStockPrice = this.fetchLatestStockPrice.bind(this);\n  }\n\n  componentDidMount(){\n    this.props.fetchAccountBalance(this.props.currentUser.id);\n    this.setState({currentBalance: this.props.accountBalance});\n    this.props.fetchPortfolio(this.props.currentUser.id).then(() => this.fetchLatestStockBatchPrices());\n  }\n\n  componentDidUpdate(){\n    if (this.props.accountBalance !== this.state.currentBalance) {\n      this.setState({currentBalance: this.props.accountBalance})\n      this.props.fetchPortfolio(this.props.currentUser.id)\n      .then(() => {\n        return this.fetchLatestStockBatchPrices()\n      });\n    }\n     else if (this.props.errors !== this.state.errors) {\n      this.setState({errors: this.props.errors});\n    } \n  }\n\n  updatePortfolioValue(){\n    const qtys = this.state.quantities;\n    let totalValue = 0;\n    this.props.prices.map((quote,idx) => {\n      return totalValue += quote.latestPrice * qtys[idx];\n    });\n    return totalValue;\n  }\n\n  renderErrors(){\n    let formattedErrors = Object.keys(this.state.errors).map((error, i) => {\n      return(\n      <li key={`port-error-${i}`}>\n        {this.state.errors[error]}\n      </li>)\n    })\n    return formattedErrors;\n  }\n\n  // fetchLatestStockPrice(){\n  //   const symbols = Array.from(this.state.symbols);\n  //   symbols.map((symbol) => (\n  //     this.props.fetchStockPrice(symbol)\n  //     ));\n  //   }\n\n  fetchLatestStockBatchPrices(){\n    const symbols = Array.from(this.state.symbols);\n    this.props.fetchStockBatchPrices(symbols);\n  } \n\n\n\n  // Tried using IEX's opening price in their api but kept returning null => might be vendor issue\n  // Opted into using previousClosing Price instead for functionality\n  renderLatestStockPrices(){\n    const qtys = this.state.quantities;\n    let prices = this.props.prices.map((quote,idx) => {\n      if (quote.latestPrice > quote.previousClose){\n        return (\n          <div key={`price-${idx}`} className=\"green-stock\">\n            ${(quote.latestPrice * qtys[idx]).toFixed(2)}\n          </div>\n        )\n      } else if (quote.latestPrice < quote.previousClose){\n        return (\n          <div key={`price-${idx}`} className=\"red-stock\">\n            ${(quote.latestPrice * qtys[idx]).toFixed(2)}\n          </div>\n        )\n      } else if (quote.latestPrice === quote.previousClose){        \n        return (\n          <div key={`price-${idx}`} className=\"gray-stock\">\n            ${(quote.latestPrice * qtys[idx]).toFixed(2)}\n          </div>\n        )\n      }\n    })\n    return prices;\n  }\n\n  renderStockSymbols(){\n    const symbols = Array.from(this.state.symbols);\n    let tickers = this.props.prices.map((quote,idx) => {\n      if (quote.latestPrice > quote.previousClose){\n        return (\n          <div key={`symbol-${idx}`} className=\"symbol-green\">{symbols[idx]}</div>\n        )\n      } else if (quote.latestPrice < quote.previousClose){\n        return (\n          <div key={`symbol-${idx}`} className=\"symbol-red\">{symbols[idx]}</div>\n        )\n      } else if (quote.latestPrice === quote.previousClose){        \n        return (\n          <div key={`symbol-${idx}`} className=\"symbol-gray\">{symbols[idx]}</div>\n        )\n      }\n    })\n    return tickers;\n  }\n\n  renderStockQuantities(){\n    let qtys;\n    let symbols;\n    const portItems = this.props.portfolio.reduce((prev, curr) => {\n      let count = prev.get(curr.symbol) || 0;\n      prev.set(curr.symbol, curr.quantity + count);\n      return prev;\n    }, new Map());\n    if (portItems.size === 0){\n      return <p>Your portfolio is empty</p>\n    } else {\n      qtys = [...portItems.values()].map((qty, idx) => {\n        this.state.quantities[idx] = qty;\n        return <div key={`qty-${idx}`} >{qty} Share(s)</div>\n      });\n      symbols = [...portItems.keys()].map((symbol) => {\n        this.state.symbols.add(symbol);\n      });\n    }\n    return(\n      <>\n    <div className=\"share-quantity\">\n      {qtys}\n    </div>\n      </>)\n    }\n\n  render() {\n    return (\n      <div className=\"main-container\">\n        <div className=\"portfolio-container\">\n          <div className=\"portfolio-header-wrapper\">\n            <div className=\"portfolio-value\">Portfolio Value: ${this.updatePortfolioValue().toFixed(2)} </div>\n          </div>\n          <div className=\"portfolio-items-wrapper\">\n            <ul className=\"stock-index\">\n              <li className=\"index-item\">\n                  <div className=\"company-symbol\">\n                    {this.renderStockSymbols()}\n                  </div>\n                    {this.renderStockQuantities()}\n                  <div className=\"stock-price\">\n                    {this.renderLatestStockPrices()}\n                  </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"trading-container\">\n          <div className=\"account-balance\">Cash Available: ${this.state.currentBalance.toFixed(2)} </div>\n          <SearchBarContainer userId={this.props.currentUser.id}/>\n          {this.renderErrors()}\n        </div>\n      </div>\n    )\n  }\n}\n","import { connect } from 'react-redux';\nimport Portfolio from './portfolio';\nimport { fetchPortfolio, fetchAccountBalance, fetchStockPrice, fetchStockBatchPrices } from '../../actions/stock_actions';\n\nconst msp = state => {\n  return {\n    currentUser: state.session.user,\n    accountBalance: state.session.user.balance,\n    portfolio: state.entities.portfolio,\n    prices: state.entities.prices,\n    errors: state.errors.portfolio\n  }\n};\n\nconst mdp = dispatch => {\n  return {\n    fetchPortfolio: (userId) => dispatch(fetchPortfolio(userId)),\n    fetchAccountBalance: (userId) => dispatch(fetchAccountBalance(userId)),\n    fetchStockPrice: (symbol) => dispatch(fetchStockPrice(symbol)),\n    fetchStockBatchPrices: (symbols) => dispatch(fetchStockBatchPrices(symbols)),\n  }\n};\n\nexport default connect(msp, mdp)(Portfolio);","import React, { Component } from 'react'\n\nexport default class Transactions extends Component {\n\n  componentDidMount(){\n    this.props.fetchPortfolio(this.props.currentUser.id);\n  }\n\n  formatAMPM(date) {\n    let hours = date.getHours();\n    let minutes = date.getMinutes();\n    let ampm = hours >= 12 ? 'pm' : 'am';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? '0'+minutes : minutes;\n    let strTime = ' @ ' + hours + ':' + minutes + ' ' + ampm;\n    return strTime;\n  }\n\n  formatDate(date){\n    return date.toLocaleString().split(',')[0];\n  }\n\n  renderTransactions(){\n    let trans = this.props.transactions.map((transaction, idx) => {\n      let stockSymbol = transaction.symbol;\n      let transactionPrice = transaction.price;\n      let stockQty = transaction.quantity;\n      let transactionDate = this.formatDate(new Date(transaction.date)).concat(this.formatAMPM(new Date (transaction.date)).toString());\n      return (\n        <li className=\"index-item\" key={idx}>\n          <div> BUY({stockSymbol}) </div>\n          <div>{stockQty} Share(s) @</div>\n          <div>${transactionPrice}</div>\n          <div>{transactionDate}</div>\n        </li>\n      )\n    });\n    return trans.reverse();\n  }\n\n  \n  render() {\n    return (\n      <div className=\"transaction-container\">\n        <div className=\"transaction-title\">Transactions</div>\n        <ul className=\"transaction-index\">\n          {this.props.transactions.length !== 0 ? this.renderTransactions() : <div>You have not made any transactions with your account.</div>}\n        </ul>\n      </div>\n    )\n  }\n}\n","import { connect } from 'react-redux';\nimport Transactions from './transactions';\nimport { fetchPortfolio } from '../../actions/stock_actions';\n\n\nconst msp = state => {\n  return {\n    currentUser: state.session.user,\n    transactions: state.entities.transactions,\n  }\n}\n\nconst mdp = dispatch => {\n  return {\n    fetchPortfolio: (userId) => dispatch(fetchPortfolio(userId)),\n  }\n}\n\nexport default connect(msp, mdp)(Transactions);","import React from 'react';\nimport { AuthRoute, ProtectedRoute } from '../util/route_util';\nimport { Switch } from 'react-router-dom';\nimport NavBarContainer from './nav/navbar_container';\n\nimport MainPage from './main/main_page.js';\nimport LoginFormContainer from './session/login_form_container';\nimport SignupFormContainer from './session/signup_form_container';\nimport PortfolioContainer from './portfolio/portfolio_container';\nimport TransactionsContainer from './transactions/transactions_container';\n\n\nconst App = () => (\n  <div className=\"background\">\n    <NavBarContainer />\n    <Switch>\n        <AuthRoute exact path=\"/\" component={MainPage} />\n        <AuthRoute exact path=\"/login\" component={LoginFormContainer} />\n        <AuthRoute exact path=\"/signup\" component={SignupFormContainer} />\n    </Switch>\n    <ProtectedRoute path='/portfolio' component={PortfolioContainer}></ProtectedRoute>\n    <ProtectedRoute path='/transactions' component={TransactionsContainer}></ProtectedRoute>\n  </div>\n);\n\nexport default App;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './app';\n\nconst Root = ({ store }) => (\n  <Provider store={ store }>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>\n);\n\nexport default Root;\n","import { RECEIVE_CURRENT_USER, \n         RECEIVE_USER_LOGOUT, \n         RECEIVE_USER_SIGN_IN } from '../actions/session_actions';\nimport { RECEIVE_NEW_BALANCE } from '../actions/stock_actions';\nimport { merge } from 'lodash';\n\n\nconst initialState = {\n  isAuthenticated: false,\n  user: {}\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case RECEIVE_CURRENT_USER:\n      return {\n        ...state,\n        isAuthenticated: !!action.currentUser,\n        user: action.currentUser\n      };\n    case RECEIVE_USER_LOGOUT:\n      return {\n        isAuthenticated: false,\n        user: undefined\n      };\n    case RECEIVE_USER_SIGN_IN:\n      return {\n        ...state,\n        isSignedIn: true\n      }\n    case RECEIVE_NEW_BALANCE:\n      const newState = merge({}, state);\n      newState.user.balance = action.accountBalance.data.balance;\n      return newState;\n    default:\n      return state;\n  }\n}","import {\n  RECEIVE_SESSION_ERRORS,\n  RECEIVE_CURRENT_USER,\n} from '../../actions/session_actions';\n\nconst _nullErrors = [];\n\nconst SessionErrorsReducer = (state = _nullErrors, action) => {\n  Object.freeze(state);\n  switch(action.type) {\n    case RECEIVE_SESSION_ERRORS:\n      return action.errors;\n    case RECEIVE_CURRENT_USER:\n      return _nullErrors;\n    default:\n      return state;\n  }\n};\n\nexport default SessionErrorsReducer;","import { RECEIVE_PORTFOLIO_ERRORS } from \"../../actions/stock_actions\";\nconst _nullErrors = [];\n\nconst PortfolioErrorsReducer = (state = _nullErrors, action) => {\n  Object.freeze(state);\n  switch(action.type) {\n    case RECEIVE_PORTFOLIO_ERRORS:\n      return action.errors;\n    default:\n      return state;\n  }\n};\n\nexport default PortfolioErrorsReducer;","import { combineReducers } from 'redux';\n\nimport SessionErrorsReducer from './session_errors_reducer';\nimport PortfolioErrorsReducer from './portfolio_errors_reducer';\n\nexport default combineReducers({\n  session: SessionErrorsReducer,\n  portfolio: PortfolioErrorsReducer,\n});","import { RECEIVE_PORTFOLIO } from '../actions/stock_actions';\n\nconst _nullState = [];\n\nconst portfolioReducer = (state = _nullState, action) => {\n  Object.freeze(state);\n  switch (action.type) {\n    case RECEIVE_PORTFOLIO:\n      return action.portfolio.data;\n    default:\n      return state;\n  }\n};\n\nexport default portfolioReducer;","import { RECEIVE_SEARCH } from '../actions/stock_actions';\n\n\nconst _nullState = {}\n\nconst searchReducer = (state = _nullState, action) => {\n  Object.freeze(state)\n  switch (action.type) {\n    case RECEIVE_SEARCH:\n      return action.results.data.bestMatches;\n    default: \n      return state;\n  }\n};\n\nexport default searchReducer;","import { RECEIVE_PORTFOLIO } from '../actions/stock_actions';\n\nconst _nullState = [];\n\nconst TransactionReducer = (state = _nullState, action) => {\n  Object.freeze(state);\n  switch (action.type) {\n    case RECEIVE_PORTFOLIO:\n      return action.portfolio.data;\n    default:\n      return state;\n  }\n};\n\nexport default TransactionReducer;","import { RECEIVE_LATEST_PRICE, RECEIVE_LATEST_BATCH_PRICES }  from '../actions/stock_actions';\nimport { merge } from 'lodash';\nconst _nullState = [];\n\nconst PriceReducer = (state = _nullState, action) => {\n  Object.freeze(state);\n  switch (action.type) {\n    // todo: Refactor this for single price fetch => to display price when user searches a price in search bar\n    case RECEIVE_LATEST_PRICE:\n      let newState = merge({}, state);\n      newState[action.payload.data.symbol] = action.payload.data.latestPrice;\n      return newState;\n    case RECEIVE_LATEST_BATCH_PRICES:\n      return action.payload.data;\n    default:\n      return state;\n  }\n};\n\nexport default PriceReducer;","import { combineReducers } from 'redux';\nimport portfolioReducer from './portfolio_reducer';\nimport searchReducer from './search_reducer';\nimport transactionReducer from './transactions_reducer';\nimport PriceReducer from './price_reducer';\n\nconst entitiesReducer = combineReducers({\n  search: searchReducer,\n  portfolio: portfolioReducer,\n  prices: PriceReducer,\n  transactions: transactionReducer,\n});\n\nexport default entitiesReducer;\n","import { combineReducers } from 'redux';\nimport session from './session_reducer';\nimport errors from './errors/errors_reducer';\nimport entities from './entities_reducer';\n\nconst RootReducer = combineReducers({\n  session,\n  errors,\n  entities,\n});\n\nexport default RootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport rootReducer from '../reducers/root_reducer';\n\nconst configureStore = (preloadedState = {}) => (\n  createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunk, logger)\n  )\n);\n\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Root from './components/root';\nimport configureStore from './store/store';\n\n// We will use this to parse the user's session token\nimport jwt_decode from 'jwt-decode';\n\n// The session utility we just created\nimport { setAuthToken } from './util/session_api_util';\nimport { logout } from './actions/session_actions';\n\nimport './stylesheets/index.css';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  let store;\n\n  // If a returning user has a session token stored in localStorage\n  if (localStorage.jwtToken) {\n\n    // Set the token as a common header for all axios requests\n    setAuthToken(localStorage.jwtToken);\n\n    // Decode the token to obtain the user's information\n    const decodedUser = jwt_decode(localStorage.jwtToken);\n\n    // Create a preconfigured state we can immediately add to our store\n    const preloadedState = { session: { isAuthenticated: true, user: decodedUser } };\n\n    store = configureStore(preloadedState);\n\n    const currentTime = Date.now() / 1000;\n\n    // If the user's token has expired\n    if (decodedUser.exp < currentTime) {\n      // Logout the user and redirect to the login page\n      store.dispatch(logout());\n      window.location.href = '/login';\n    }\n  } else {\n    // If this is a first time user, start with an empty store\n    store = configureStore({});\n  }\n  // Render our root component and pass in the store as a prop\n  const root = document.getElementById('root');\n\n  ReactDOM.render(<Root store={store} />, root);\n});"],"sourceRoot":""}